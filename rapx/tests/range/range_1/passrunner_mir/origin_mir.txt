// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// HINT: See also -Z dump-mir for MIR at specific points during compilation.
static _SSAstmt: std::option::Option<SSAstmt> = {
    let mut _0: std::option::Option<SSAstmt>;

    bb0: {
        _0 = std::option::Option::<SSAstmt>::None;
        return;
    }
}

static _ESSAstmt: std::option::Option<ESSAstmt> = {
    let mut _0: std::option::Option<ESSAstmt>;

    bb0: {
        _0 = std::option::Option::<ESSAstmt>::None;
        return;
    }
}

fn foo() -> i32 {
    let mut _0: i32;
    let mut _1: !;
    let mut _2: i32;
    let _3: ();
    let mut _4: ();
    let mut _5: bool;
    let mut _6: i32;
    let _9: ();
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let mut _13: (i32, bool);
    let mut _14: (i32, bool);
    let mut _15: !;
    let _16: ();
    let mut _17: !;
    let _18: ();
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let mut _22: !;
    let mut _23: (i32, bool);
    let mut _24: (i32, bool);
    let mut _25: !;
    let _26: ();
    let mut _27: !;
    scope 1 {
        debug k => _2;
        let mut _7: i32;
        scope 2 {
            debug i => _7;
            let mut _8: i32;
            scope 3 {
                debug j => _8;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = const 0_i32;
        StorageLive(_3);
        goto -> bb1;
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = copy _2;
        _5 = Lt(move _6, const 100_i32);
        switchInt(move _5) -> [0: bb12, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = const 0_i32;
        StorageLive(_8);
        _8 = copy _2;
        StorageLive(_9);
        goto -> bb3;
    }

    bb3: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = copy _7;
        StorageLive(_12);
        _12 = copy _8;
        _10 = Lt(move _11, move _12);
        switchInt(move _10) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        _13 = AddWithOverflow(copy _7, const 1_i32);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _7, const 1_i32) -> [success: bb5, unwind continue];
    }

    bb5: {
        _7 = move (_13.0: i32);
        _14 = SubWithOverflow(copy _8, const 1_i32);
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", copy _8, const 1_i32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _8 = move (_14.0: i32);
        _4 = const ();
        StorageDead(_10);
        goto -> bb3;
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_16);
        _9 = const ();
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = copy _7;
        StorageLive(_21);
        _21 = copy _8;
        _19 = Le(move _20, move _21);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        _23 = AddWithOverflow(copy _2, const 1_i32);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _2, const 1_i32) -> [success: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        _24 = AddWithOverflow(copy _2, const 1_i32);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _2, const 1_i32) -> [success: bb11, unwind continue];
    }

    bb10: {
        _2 = move (_23.0: i32);
        _0 = copy _7;
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb13;
    }

    bb11: {
        _2 = move (_24.0: i32);
        _4 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb1;
    }

    bb12: {
        StorageDead(_6);
        StorageLive(_26);
        _3 = const ();
        StorageDead(_26);
        StorageDead(_5);
        StorageDead(_3);
        _0 = copy _2;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;

    bb0: {
        StorageLive(_1);
        _1 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        _0 = const ();
        return;
    }
}
